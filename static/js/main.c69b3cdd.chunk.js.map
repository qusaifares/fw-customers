{"version":3,"sources":["types/customer.ts","utils/api.ts","components/CustomerModal/CustomerModal.tsx","components/CustomTable/CustomTable.tsx","utils/age.ts","pages/Customers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomersModalType","request","path","init","fetch","getCustomers","a","options","size","undefined","res","json","createCustomer","createCustomerDto","method","body","JSON","stringify","headers","CustomerModal","type","customer","props","text","CREATE","title","VIEW","useState","renderCount","setRenderCount","formSubmitted","setFormSubmitted","first_name","last_name","date_birth","email","mobile_phone_number","primary_address","address_line_1","city","state","zip_code","ssn","customerData","setCustomerData","addressFields","dateFrom","dateStr","split","month","day","year","useEffect","prev","show","fields","fieldsFromObject","data","Object","keys","flatMap","key","handleSubmit","e","preventDefault","console","log","Modal","dialogClassName","contentClassName","Header","Title","Body","className","Alert","variant","Form","onSubmit","map","field","Group","controlId","Label","style","textTransform","replaceAll","Control","required","value","substring","length","onChange","includes","target","readOnly","Button","disabled","CustomTable","columns","getCustomer","rowsPerPageOptions","searchStr","setSearchStr","page","setPage","rowsPerPage","setRowsPerPage","modal","setModal","openModal","row","customer_number","age","pages","Math","ceil","tableData","slice","filter","values","join","toLowerCase","onHide","InputGroup","FormControl","placeholder","onClick","Table","borderless","label","Array","fill","Placeholder","animation","as","Select","defaultValue","v","Pagination","pageNums","minPageBtn","max","maxPageBtn","min","i","push","First","n","Item","active","Last","pageButtons","getAge","dobString","today","str","dob","Date","getFullYear","monthsDiff","getMonth","getDate","Customers","customers","setCustomers","setErrorMessage","populateCustomers","customersRes","customersRes2","custList","find","cust","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69b3cdd.chunk.js","sourcesContent":["export interface Customer {\n  customer_number: number;\n  first_name: string;\n  last_name: string;\n  date_birth: string;\n  ssn: string;\n  email: string | null;\n  primary_address: CustomerAddress;\n  mobile_phone_number: string | null;\n  join_date: string;\n}\n\nexport interface CustomerAddress {\n  address_line_1: string;\n  city: string;\n  state: string;\n  zip_code: string | number;\n}\n\nexport type CreateCustomerDto = Omit<Customer, 'customer_number' | 'join_date'>;\n\nexport type CustomerTableItem = Omit<\n  Customer,\n  'email' | 'primary_address' | 'mobile_phone_number' | 'join_date'\n> & { age: number };\n\nexport enum CustomersModalType {\n  CREATE,\n  VIEW,\n}\n","import { GetCustomersOptions } from '../types/api';\nimport { CreateCustomerDto, Customer } from '../types/customer';\n\nconst API_URL = 'https://my.api.mockaroo.com/customers.json?key=e95894a0';\n\nconst request = (path: string, init?: RequestInit) => fetch(`${API_URL}${path}`, init);\n\nexport const getCustomers = async (options: GetCustomersOptions = {}): Promise<Customer[]> => {\n  const { size } = options;\n  const res = await request(size !== undefined ? `&size=${size}` : '');\n  return res.json();\n};\n\nexport const createCustomer = async (createCustomerDto: CreateCustomerDto) => {\n  const res = await request('', {\n    method: 'POST',\n    body: JSON.stringify(createCustomerDto),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  return res.json();\n};\n","import { FC, FormEventHandler, useEffect, useState } from 'react';\nimport { Alert, Button, FloatingLabel, Form, Modal, ModalProps } from 'react-bootstrap';\nimport {\n  CreateCustomerDto,\n  Customer,\n  CustomerAddress,\n  CustomersModalType,\n} from '../../types/customer';\nimport { createCustomer } from '../../utils/api';\n\nimport './CustomerModal.scss';\n\ninterface Props extends ModalProps {\n  type: CustomersModalType;\n  customer?: Customer;\n}\n\nconst CustomerModal: FC<Props> = ({ type, customer, ...props }) => {\n  const textVars: { [key in CustomersModalType]: { title: string } } = {\n    [CustomersModalType.CREATE]: { title: 'Create Customer' },\n    [CustomersModalType.VIEW]: { title: 'View Customer' },\n  };\n  const text = textVars[type];\n  const [renderCount, setRenderCount] = useState(0);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const incrementRenderCount = () => setRenderCount((prev) => prev + 1);\n  const [customerData, setCustomerData] = useState<CreateCustomerDto>(\n    customer ||\n      ({\n        first_name: '',\n        last_name: '',\n        date_birth: '',\n        email: '',\n        mobile_phone_number: '',\n        primary_address: { address_line_1: '', city: '', state: '', zip_code: '' },\n        ssn: '',\n      } as CreateCustomerDto)\n  );\n  const addressFields = ['address_line_1', 'city', 'state', 'zip_code'];\n  const dateFrom = (dateStr: string) => {\n    const [month, day, year] = dateStr.split('/');\n    return `${year}-${month}-${day}`;\n  };\n\n  useEffect(() => {\n    incrementRenderCount();\n    setCustomerData(\n      customer ||\n        ({\n          first_name: '',\n          last_name: '',\n          date_birth: '',\n          email: '',\n          mobile_phone_number: '',\n          primary_address: { address_line_1: '', city: '', state: '', zip_code: '' },\n          ssn: '',\n        } as CreateCustomerDto)\n    );\n    return () => {\n      setFormSubmitted(false);\n    };\n  }, [customer, props.show]);\n\n  const fieldsFromObject = (data: any): string[] => {\n    if (!data) return [];\n    const fields = Object.keys(data).flatMap((key) =>\n      typeof data[key] === 'object' ? fieldsFromObject(data[key]) : key\n    );\n    return fields as string[];\n  };\n\n  const fields = fieldsFromObject(customerData);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {\n    try {\n      e.preventDefault();\n\n      const res = await createCustomer(customerData);\n      setFormSubmitted(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Modal\n      {...props}\n      dialogClassName='customerModal__dialog'\n      contentClassName='customerModal__content'\n    >\n      <Modal.Header>\n        <Modal.Title>{text.title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body className='customerModal__body'>\n        {formSubmitted ? (\n          <Alert variant='success'>Customer has been created successfully!</Alert>\n        ) : (\n          <Form onSubmit={handleSubmit}>\n            {fields.map((field) => (\n              <Form.Group\n                key={`${renderCount}${field}`}\n                className='mb-3'\n                controlId={`formGroup__${field}`}\n              >\n                <Form.Label style={{ textTransform: field === 'ssn' ? 'uppercase' : 'capitalize' }}>\n                  {field.replaceAll('_', ' ')}\n                </Form.Label>\n                <Form.Control\n                  required\n                  type={field === 'date_birth' ? 'date' : 'text'}\n                  value={\n                    field === 'date_birth' && type === CustomersModalType.VIEW\n                      ? dateFrom(customerData[field])\n                      : field === 'ssn' && type === CustomersModalType.VIEW\n                      ? `***-**-${customerData[field].substring(customerData[field].length - 4)}`\n                      : customerData.primary_address[field as keyof CustomerAddress] ||\n                        (customerData[field as keyof typeof customerData] as string)\n                  }\n                  onChange={(e) =>\n                    setCustomerData((prev) => ({\n                      ...prev,\n                      primary_address: {\n                        ...prev.primary_address,\n                        ...(addressFields.includes(field) && { [field]: e.target.value }),\n                      },\n                      ...(!addressFields.includes(field) && { [field]: e.target.value }),\n                    }))\n                  }\n                  readOnly={type === CustomersModalType.VIEW}\n                />\n              </Form.Group>\n            ))}\n\n            {type === CustomersModalType.CREATE ? (\n              <Button variant='primary' type='submit' disabled={formSubmitted}>\n                Submit\n              </Button>\n            ) : null}\n          </Form>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default CustomerModal;\n","import { ReactNode, useEffect, useState } from 'react';\nimport {\n  Button,\n  Form,\n  FormControl,\n  InputGroup,\n  Pagination,\n  Placeholder,\n  Table,\n} from 'react-bootstrap';\nimport { Customer, CustomersModalType, CustomerTableItem } from '../../types/customer';\nimport CustomerModal from '../CustomerModal/CustomerModal';\nimport './CustomTable.scss';\n\nexport interface Column<T> {\n  label: string;\n  key: keyof T;\n}\n\ninterface Props<T extends {}> {\n  // developer can control what columns to show\n  columns: Column<T>[];\n\n  // data only shows values with keys that exist in columns\n  data: T[];\n\n  // get full customer data by number\n  getCustomer: (customer_number: number) => Customer | undefined;\n}\n\nconst CustomTable = <T extends {}>({ columns, data, getCustomer }: Props<T>) => {\n  const rowsPerPageOptions = [25, 50, 100];\n\n  const [searchStr, setSearchStr] = useState('');\n  const [page, setPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageOptions[0]);\n  const [modal, setModal] = useState({ show: false, type: CustomersModalType.CREATE });\n  const closeModal = () => setModal((prev) => ({ ...prev, customer: undefined, show: false }));\n  const openModal = (type: CustomersModalType, row?: T) =>\n    setModal((prev) => ({\n      ...prev,\n      customer: row && {\n        ...getCustomer((row as unknown as CustomerTableItem).customer_number),\n        age: (row as unknown as CustomerTableItem).age,\n      },\n      type,\n      show: true,\n    }));\n\n  useEffect(() => {\n    setPage(1);\n  }, [rowsPerPage]);\n\n  const pages = Math.ceil(data.length / rowsPerPage);\n\n  // get up to 6 page buttons depending on current page\n  const pageButtons = (): ReactNode => {\n    const pageNums: number[] = [];\n\n    let minPageBtn = Math.max(1, page - 3);\n    const maxPageBtn = Math.min(pages, minPageBtn + 6);\n\n    if (maxPageBtn === pages) {\n      minPageBtn = Math.max(1, maxPageBtn - 6);\n    }\n\n    for (let i = minPageBtn; i <= maxPageBtn; i++) {\n      pageNums.push(i);\n    }\n\n    return [\n      <Pagination.First onClick={() => setPage(1)} />,\n      ...pageNums.map((n) => (\n        <Pagination.Item key={n} onClick={() => setPage(n)} active={page === n}>\n          {n}\n        </Pagination.Item>\n      )),\n      <Pagination.Last onClick={() => setPage(pages)} />,\n    ];\n  };\n\n  const tableData = data\n    .slice(rowsPerPage * (page - 1), rowsPerPage * page)\n    .filter((row) => Object.values(row).join(' ').toLowerCase().includes(searchStr));\n\n  return (\n    <div className='customTable'>\n      <CustomerModal {...modal} onHide={closeModal} />\n      <div className='customTable__header'>\n        <InputGroup className='customTable__headerSearch'>\n          <FormControl\n            className='customTable__headerSearchInput'\n            placeholder='Search...'\n            value={searchStr}\n            onChange={(e) => setSearchStr(e.target.value)}\n          />\n        </InputGroup>\n        <div className='customTable__headerCreate'>\n          <Button\n            className='customTable__headerCreateBtn'\n            variant='light'\n            onClick={() => openModal(CustomersModalType.CREATE)}\n          >\n            Create Customer\n          </Button>\n        </div>\n      </div>\n      <div className='customTable__body'>\n        <Table borderless className='customTable__bodyTable'>\n          <thead>\n            <tr>\n              {columns.map(({ label }) => (\n                <th key={label}>{label}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((row) => (\n              <tr\n                key={Object.values(row).join('')}\n                onClick={() => openModal(CustomersModalType.VIEW, row)}\n              >\n                {columns.map(({ label, key }) => (\n                  <td key={label}>{row[key] || ''}</td>\n                ))}\n              </tr>\n            ))}\n            {new Array(rowsPerPage - tableData.length).fill(\n              <tr className='customTable__bodyTableRow-placeholder'>\n                {columns.map(({ label }) => (\n                  <td key={label}>\n                    <Placeholder animation='glow' as='div'></Placeholder>\n                  </td>\n                ))}\n              </tr>\n            )}\n          </tbody>\n        </Table>\n      </div>\n      <div className='customTable__footer'>\n        <div className='customTable__footerRows'>\n          <Form.Select\n            defaultValue={10}\n            size='sm'\n            onChange={(e) => setRowsPerPage(+e.target.value)}\n          >\n            {rowsPerPageOptions.map((v) => (\n              <option key={v} value={v}>\n                {v}\n              </option>\n            ))}\n          </Form.Select>\n          <p>rows per page</p>\n        </div>\n        <Pagination>{pageButtons()}</Pagination>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomTable;\n","/** Returns age in years */\nexport const getAge = (dobString: string, today: Date): number => {\n  const [month, day, year] = dobString.split('/').map((str) => +str);\n  const dob = new Date(year, month - 1, day);\n\n  let age = today.getFullYear() - dob.getFullYear();\n\n  const monthsDiff = today.getMonth() - dob.getMonth();\n\n  const preBirthday = monthsDiff < 0 || (!monthsDiff && today.getDate() < dob.getDate());\n\n  if (preBirthday) age--;\n  return age;\n};\n","import { FC, useEffect, useState } from 'react';\nimport { Table } from 'react-bootstrap';\nimport CustomTable, { Column } from '../components/CustomTable/CustomTable';\nimport { Customer, CustomerTableItem } from '../types/customer';\nimport { getAge } from '../utils/age';\nimport { getCustomers } from '../utils/api';\n\nimport '../styles/Customers.scss';\n\ninterface Props {}\n\nconst Customers: FC<Props> = () => {\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const getCustomer = (customer_number: number) =>\n    customers.find((cust) => cust.customer_number === customer_number);\n\n  const populateCustomers = async () => {\n    try {\n      const customersRes = await getCustomers({ size: 200 });\n      setCustomers(customersRes);\n      const customersRes2 = await getCustomers({ size: 800 });\n      setCustomers([...customersRes, ...customersRes2]);\n    } catch (error: any) {\n      setErrorMessage('Error fetching customers.');\n    }\n  };\n\n  useEffect(() => {\n    populateCustomers();\n\n    return () => {\n      setCustomers([]);\n      setErrorMessage('');\n    };\n  }, []);\n\n  const today = new Date();\n\n  const getCustomerTableItems = (custList: Customer[]): CustomerTableItem[] => {\n    return custList.map(({ customer_number, first_name, last_name, date_birth, ssn }) => ({\n      customer_number,\n      first_name,\n      last_name,\n      date_birth,\n      ssn: ssn ? `***-**-${ssn.substring(ssn.length - 4)}` : '',\n      age: getAge(date_birth, today),\n    }));\n  };\n\n  const columns: Column<CustomerTableItem>[] = [\n    { label: 'Customer Number', key: 'customer_number' },\n    { label: 'First Name', key: 'first_name' },\n    { label: 'Last Name', key: 'last_name' },\n    { label: 'Date of Birth', key: 'date_birth' },\n    { label: 'SSN', key: 'ssn' },\n    { label: 'Age', key: 'age' },\n  ];\n\n  return (\n    <div className='customers'>\n      <div className='customers__content'>\n        <CustomTable\n          columns={columns}\n          data={getCustomerTableItems(customers)}\n          getCustomer={getCustomer}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Customers;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Customers from './pages/Customers';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Customers />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}